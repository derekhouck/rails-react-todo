require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/todoitems", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Todoitem. As you add validations to Todoitem, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: 'some name',
      active: true
    }
  }

  let(:invalid_attributes) {
    {
      name: '',
      active: 3
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # TodoitemsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    it "renders a successful response" do
      Todoitem.create! valid_attributes
      get todoitems_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      todoitem = Todoitem.create! valid_attributes
      get todoitem_url(todoitem), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Todoitem" do
        expect {
          post todoitems_url,
               params: { todoitem: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Todoitem, :count).by(1)
      end

      it "renders a JSON response with the new todoitem" do
        post todoitems_url,
             params: { todoitem: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json; charset=utf-8"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Todoitem" do
        expect {
          post todoitems_url,
               params: { todoitem: invalid_attributes }, as: :json
        }.to change(Todoitem, :count).by(0)
      end

      it "renders a JSON response with errors for the new todoitem" do
        post todoitems_url,
             params: { todoitem: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          name: 'new todo name',
          active: false
        }
      }

      it "updates the requested todoitem" do
        todoitem = Todoitem.create! valid_attributes
        patch todoitem_url(todoitem),
              params: { todoitem: new_attributes }, headers: valid_headers, as: :json
        todoitem.reload
        expect(todoitem.name).to eq new_attributes[:name]
        expect(todoitem.active).to eq new_attributes[:active]
      end

      it "renders a JSON response with the todoitem" do
        todoitem = Todoitem.create! valid_attributes
        patch todoitem_url(todoitem),
              params: { todoitem: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json; charset=utf-8"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the todoitem" do
        todoitem = Todoitem.create! valid_attributes
        patch todoitem_url(todoitem),
              params: { todoitem: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested todoitem" do
      todoitem = Todoitem.create! valid_attributes
      expect {
        delete todoitem_url(todoitem), headers: valid_headers, as: :json
      }.to change(Todoitem, :count).by(-1)
    end
  end
end
